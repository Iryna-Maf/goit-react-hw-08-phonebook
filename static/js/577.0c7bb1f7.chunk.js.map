{"version":3,"file":"static/js/577.0c7bb1f7.chunk.js","mappings":"yOACA,EAAiC,sC,SC6DjC,EAzDqB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SACtB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAoB,SAAAC,GACxB,MAAwBA,EAAEC,cAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MAEd,OAAQT,GACN,IAAK,OACHC,EAAQQ,GACR,MACF,IAAK,QACHN,EAASM,GACT,MACF,IAAK,WACHJ,EAAYI,GACZ,MACF,QACE,OAEL,EAeKC,EAAY,WAChBT,EAAQ,IACRE,EAAS,IACTE,EAAY,GACb,EACD,OACE,kBAAMP,SAnBa,SAAAS,GACnBA,EAAEI,iBAOFb,EANiB,CACfE,KAAAA,EACAE,MAAAA,EACAE,SAAAA,IAKFM,GACD,EAQC,WACE,SAACE,EAAA,GAAD,QAAWH,MAAOT,EAAMa,SAAUP,GAAuBQ,EAAAA,EAAAA,QACzD,SAACF,EAAA,GAAD,QAAWH,MAAOP,EAAOW,SAAUP,GAAuBQ,EAAAA,EAAAA,SAC1D,SAACF,EAAA,GAAD,QACEH,MAAOL,EACPS,SAAUP,GACNQ,EAAAA,EAAAA,YAEN,mBAAQC,KAAK,SAASC,UAAWC,EAAjC,6BAKL,E,wCCrCD,EAhBqB,WACnB,IAAMC,GAAWC,EAAAA,EAAAA,MAKjB,OADgBC,EAAAA,EAAAA,MAEP,SAAC,KAAD,CAAUC,GAAG,eAGpB,0BACE,SAAC,EAAD,CAAcvB,SATD,SAAAwB,GACfJ,GAASK,EAAAA,EAAAA,IAAOD,GACjB,KAUF,C,uDCpBD,MAAwB,0BAAxB,EAA0D,0BAA1D,EAA4F,0B,6BCGtFV,EAAY,SAAC,GAUZ,IATLY,EASI,EATJA,MACAxB,EAQI,EARJA,KACAS,EAOI,EAPJA,MACAgB,EAMI,EANJA,YACAC,EAKI,EALJA,SACAX,EAII,EAJJA,KACAY,EAGI,EAHJA,QACAC,EAEI,EAFJA,MACAf,EACI,EADJA,SAEMgB,GAAKC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IACnC,OACE,gBAAKf,UAAWC,EAAhB,SACGO,IACC,mBAAOQ,QAASH,EAAIb,UAAWC,EAA/B,UACGO,EADH,KAEE,kBACER,UAAWC,EACXF,KAAMA,EACNf,KAAMA,EACN2B,QAASA,EACTC,MAAOA,EACPF,SAAUA,EACVjB,MAAOA,EACPoB,GAAIA,EACJJ,YAAaA,EACbZ,SAAUA,QAMrB,EAED,IAEAD,EAAUqB,aAAe,CACvBlB,KAAM,OACNW,UAAU,E,uDC3CL,IAAMZ,EAAS,CACpBd,KAAM,CACJwB,MAAO,OACPxB,KAAM,OACNyB,YAAa,aACbC,UAAU,EACVX,KAAM,OACNY,QAAS,yHACTC,MACE,0IAEJ1B,MAAO,CACLsB,MAAO,QACPxB,KAAM,QACNyB,YAAa,cACbC,UAAU,EACVX,KAAM,QACNY,QAAS,mDACTC,MAAO,8BAETxB,SAAU,CACRoB,MAAO,WACPxB,KAAM,WACNyB,YAAa,iBACbC,UAAU,EACVX,KAAM,WACNa,MAAO,8B,wDCzBX,IAkBIG,EAAS,WAGX,IAH0B,IAAdG,EAAc,uDAAP,GACfL,EAAK,GACLM,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfL,GADEU,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOV,CACR,C","sources":["webpack://react-homework-template/./src/components/RegisterForm/register-form.module.css?a013","components/RegisterForm/RegisterForm.jsx","Pages/RegisterPage/RegisterPage.jsx","webpack://react-homework-template/./src/components/TextField/text-field.module.css?a0d7","components/TextField/TextField.jsx","components/TextField/fields.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"registerButton\":\"register-form_registerButton__oslSw\"};","import { useState } from 'react';\nimport TextField from 'components/TextField/TextField';\nimport { fields } from 'components/TextField/fields';\nimport s from './register-form.module.css';\n\nconst RegisterForm = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const hendleInputChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const hendleSubmit = e => {\n    e.preventDefault();\n    const dataUser = {\n      name,\n      email,\n      password,\n    };\n\n    onSubmit(dataUser);\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n  return (\n    <form onSubmit={hendleSubmit}>\n      <TextField value={name} onChange={hendleInputChange} {...fields.name} />\n      <TextField value={email} onChange={hendleInputChange} {...fields.email} />\n      <TextField\n        value={password}\n        onChange={hendleInputChange}\n        {...fields.password}\n      />\n      <button type=\"submit\" className={s.registerButton}>\n        Register user\n      </button>\n    </form>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\nimport { useDispatch } from 'react-redux';\nimport { signup } from '../../redux/auth/auth-operations';\n\nimport { Navigate } from 'react-router-dom';\nimport useAuth from 'shared/hooks/useAuth';\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n  const onSignUp = data => {\n    dispatch(signup(data));\n  };\n  const isLogin = useAuth();\n  if (isLogin) {\n    return <Navigate to=\"/contacts\" />;\n  }\n  return (\n    <div>\n      <RegisterForm onSubmit={onSignUp} />\n    </div>\n  );\n};\n\nexport default RegisterPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"text-field_block__cMPnO\",\"label\":\"text-field_label__aA6hD\",\"input\":\"text-field_input__9Gcuq\"};","import s from './text-field.module.css';\nimport { nanoid } from 'nanoid';\nimport { useMemo } from 'react';\n\nconst TextField = ({\n  label,\n  name,\n  value,\n  placeholder,\n  required,\n  type,\n  pattern,\n  title,\n  onChange,\n}) => {\n  const id = useMemo(() => nanoid(), []);\n  return (\n    <div className={s.block}>\n      {label && (\n        <label htmlFor={id} className={s.label}>\n          {label}:\n          <input\n            className={s.input}\n            type={type}\n            name={name}\n            pattern={pattern}\n            title={title}\n            required={required}\n            value={value}\n            id={id}\n            placeholder={placeholder}\n            onChange={onChange}\n          />\n        </label>\n      )}\n    </div>\n  );\n};\n\nexport default TextField;\n\nTextField.defaultProps = {\n  type: 'text',\n  required: false,\n};\n","export const fields = {\n  name: {\n    label: 'Name',\n    name: 'name',\n    placeholder: 'input name',\n    required: true,\n    type: 'text',\n    pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n    title:\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n  },\n  email: {\n    label: 'Email',\n    name: 'email',\n    placeholder: 'input email',\n    required: true,\n    type: 'email',\n    pattern: '([A-z0-9_.-]{1,})@([A-z0-9_.-]{1,}).([A-z]{2,8})',\n    title: 'Please enter correct email',\n  },\n  password: {\n    label: 'Password',\n    name: 'password',\n    placeholder: 'input password',\n    required: true,\n    type: 'password',\n    title: 'Please enter correct email',\n  },\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["onSubmit","useState","name","setName","email","setEmail","password","setPassword","hendleInputChange","e","currentTarget","value","resetForm","preventDefault","TextField","onChange","fields","type","className","s","dispatch","useDispatch","useAuth","to","data","signup","label","placeholder","required","pattern","title","id","useMemo","nanoid","htmlFor","defaultProps","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}